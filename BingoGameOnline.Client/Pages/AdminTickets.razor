@page "/admin/tickets"
@* --- Imports and Dependency Injection --- *@
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@using BingoGameOnline.Client.Services
@inject IJSRuntime jsRuntime
@inject NavigationManager Navigation
@inject AdminBingoHubService AdminHub

@if (!isAdmin && !showPasswordDialog)
{
    <div class="alert alert-danger">
        Access Denied. Admin password required.<br />
        You will be redirected to Home page in 5 seconds.
    </div>
}
else if (showPasswordDialog)
{
    <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Admin Login</h5>
                </div>
                <div class="modal-body">
                    <div class="input-group">
                        <input 
                            class="form-control" 
                            placeholder="Enter admin password" 
                            @bind-value="enteredPassword"
                            @bind-value:event="oninput"
                            @onkeydown="OnPasswordKeyDown" 
                            autofocus
                            type="@(passwordVisible ? "text" : "password")" />
                        <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                            <span>@(passwordVisible ? "Hide" : "Show")</span>
                        </button>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="CheckPassword">Login</button>
                </div>
            </div>
        </div>
    </div>
}
else if (isAdmin)
{
    @* --- Section: Win Announcements --- *@
    @if (!string.IsNullOrEmpty(AdminHub.LineWinAnnouncement))
    {
        <div class="win-message">@AdminHub.LineWinAnnouncement</div>
    }
    @if (!string.IsNullOrEmpty(AdminHub.BingoWinAnnouncement))
    {
        <div class="win-message">@AdminHub.BingoWinAnnouncement</div>
    }

    <div style="display: flex; gap: 32px; align-items: flex-start;">
        @* --- Section: Left Side Controls and Called Numbers --- *@
        <div style="flex: 1 1 0; min-width: 350px;">
            <select @onchange="OnSelectedUserChanged" class="form-select" style="width: auto; display: inline-block; margin-right: 8px;">
                <option value="">-- Select Player --</option>
                @foreach (var user in AdminHub.Users)
                {
                    <option value="@user.ConnectionId">@user.PlayerName</option>
                }
            </select>
            <button class="btn btn-primary" @onclick="GenerateAndSendTicket" disabled="@(string.IsNullOrWhiteSpace(selectedConnectionId))" style="margin-right: 8px;">Generate & Send Ticket</button>
            <button class="btn btn-primary" @onclick="LoadUsers" style="margin-right: 8px;">Refresh Users</button>

            @if (!string.IsNullOrEmpty(AdminHub.ConfirmationMessage))
            {
                <div class="alert alert-success">@AdminHub.ConfirmationMessage</div>
            }

            <br /><br />
            <h3>Drawn Numbers</h3>
            <div style="margin-bottom: 16px;">
                <button class="btn btn-primary" @onclick="CallNumber" style="margin-right: 8px;">Call Number</button>
                <button class="btn btn-primary" @onclick="NewGame">New Game</button>
            </div>
            <div style="margin-bottom: 16px;">
                <span>Draw Number: </span>
                <span style="display:inline-block;width:32px;text-align:center;">
                    @(AdminHub.DrawnNumbers.Count > 0 ? AdminHub.DrawnNumbers[AdminHub.DrawnNumbers.Count - 1].ToString() : "-")
                </span>
            </div>
            <div style="margin-bottom: 16px;">
                <table class="numbers-grid" style="margin:auto;">
                    <tbody>
                        @for (int row = 0; row < 9; row++)
                        {
                            <tr>
                                @for (int col = 1; col <= 10; col++)
                                {
                                    int num = row * 10 + col;
                                    if (num > 90) break;
                                    bool isCalled = AdminHub.DrawnNumbers.Contains(num);
                                    <td class="@(isCalled ? "called" : null)">@num</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        @* --- Section: Right Side - Selected User's Ticket --- *@
        <div style="flex: 1 1 0; min-width: 350px;">
            @if (!string.IsNullOrWhiteSpace(selectedConnectionId))
            {
                <h4>@(AdminHub.Users.FirstOrDefault(u => u.ConnectionId == selectedConnectionId)?.PlayerName ?? "Player")'s Ticket</h4>
                @if (selectedUserTicket != null)
                {
                    <div style="display: flex; flex-wrap: wrap; gap: 24px;">
                        @for (int grid = 0; grid < 5; grid++)
                        {
                            <table class="table table-bordered ticket-table" style="margin-bottom: 16px;">
                                <tbody>
                                    @for (int i = 0; i < 3; i++)
                                    {
                                        <tr>
                                            @for (int j = 0; j < 9; j++)
                                            {
                                                var value = selectedUserTicket.Numbers[grid * 3 + i][j];
                                                bool isCalled = value.HasValue && AdminHub.DrawnNumbers.Contains(value.Value);
                                                <td class="@(isCalled ? "called" : null)">@(value.HasValue ? value.Value.ToString() : "")</td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                    </div>
                }
                else
                {
                    <div class="alert alert-info">No ticket found for this user.</div>
                }
            }
            else
            {
                <div class="alert alert-secondary">Select a player to view their ticket.</div>
            }
        </div>
    </div>

}

@code {
    // --- Admin Authentication State ---
    private bool isAdmin = false;
    private string adminPassword = "letmein"; // Change this to your desired password
    private System.Threading.Timer? redirectTimer;
    private bool showPasswordDialog = false;
    private string enteredPassword = string.Empty;
    private bool passwordVisible = false;

    // --- AdminHub State ---
    private string selectedConnectionId = string.Empty;
    private BingoGameOnline.Client.Services.BingoTicket? selectedUserTicket;

    // --- Section: Admin Authentication Logic ---
    private void TogglePasswordVisibility()
    {
        passwordVisible = !passwordVisible;
    }

    private async Task CheckPassword()
    {
        if (enteredPassword == adminPassword)
        {
            await jsRuntime.InvokeVoidAsync("bingoNameSession.setAdmin");
            isAdmin = true;
            showPasswordDialog = false;
            enteredPassword = string.Empty;
            await InitializeAdminHub();
            StateHasChanged();
        }
        else
        {
            showPasswordDialog = false;
            // Start a timer to redirect after 5 seconds
            redirectTimer = new System.Threading.Timer(_ =>
            {
                InvokeAsync(() => Navigation.NavigateTo("/"));
            }, null, 5000, System.Threading.Timeout.Infinite);
        }
    }

    private void OnPasswordKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            _ = CheckPassword();
        }
    }

    // --- Section: AdminHub Initialization ---
    protected override async Task OnInitializedAsync()
    {
        isAdmin = await jsRuntime.InvokeAsync<bool>("bingoNameSession.isAdmin");
        if (!isAdmin)
        {
            showPasswordDialog = true;
        }
        if (isAdmin)
        {
            await InitializeAdminHub();
        }
    }

    private async Task InitializeAdminHub()
    {
        // Connect and subscribe to state changes
        await AdminHub.ConnectAsync();
        AdminHub.OnStateChanged += StateHasChanged;
        AdminHub.OnUsersChanged += StateHasChanged;
        await AdminHub.LoadUsers();
    }

    // --- Section: AdminHub Actions ---
    private async Task NewGame()
    {
        await AdminHub.NewGame();
    }

    private async Task CallNumber()
    {
        await AdminHub.CallNumber();
    }

    private async Task LoadUsers()
    {
        await AdminHub.LoadUsers();
        // Optionally refresh the selected user's ticket if a user is selected
        if (!string.IsNullOrWhiteSpace(selectedConnectionId))
        {
            await OnSelectedUserChanged(new ChangeEventArgs { Value = selectedConnectionId });
        }
    }

    private async Task GenerateAndSendTicket()
    {
        if (!string.IsNullOrWhiteSpace(selectedConnectionId))
        {
            await AdminHub.GenerateAndSendTicket(selectedConnectionId);
        }
    }

    // --- Section: User Ticket Management ---
    private async Task OnSelectedUserChanged(ChangeEventArgs e)
    {
        selectedConnectionId = e.Value?.ToString() ?? string.Empty;
        selectedUserTicket = null;
        if (!string.IsNullOrWhiteSpace(selectedConnectionId))
        {
            selectedUserTicket = await AdminHub.GetUserTicket(selectedConnectionId);
        }
    }
}
