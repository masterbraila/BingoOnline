@inject IJSRuntime jsRuntime
@inject BingoHubService BingoHub
@inject NavigationManager NavigationManager
@page "/myticket"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@using BingoGameOnline.Client.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components

<PageTitle>Bingo Online</PageTitle>

@if (ticket != null)
{
    <div class="flex-main">
        <!-- Left: Ticket -->
        <div class="ticket-area">
            <div class="ticket-header" style="display: flex; align-items: center; justify-content: space-between;">
                <h4 style="margin: 0;">@playerName's Bingo Ticket</h4>
                <button class="btn btn-secondary" onclick="window.print()">Print Ticket</button>
            </div>
            <div class="ticket-grids">
                @for (int grid = 0; grid < 5; grid++)
                {
                    <table class="table table-bordered ticket-table">
                        <tbody>
                            @for (int i = 0; i < 3; i++)
                            {
                                <tr>
                                    @for (int j = 0; j < 9; j++)
                                    {
                                        var row = grid * 3 + i;
                                        var col = j; // capture for closure
                                        int? value = null;
                                        bool isMarked = false;
                                        if (ticket?.Numbers != null && ticket.Numbers.Length > row && ticket.Numbers[row] != null && ticket.Numbers[row].Length > col)
                                        {
                                            value = ticket.Numbers[row][col];
                                            isMarked = marked[row, col];
                                        }
                                        if (value.HasValue)
                                        {
                                            <td @onclick="() => MarkCell(row, col)" style="cursor:pointer;" class="@(isMarked ? "marked" : null)">
                                                @value.Value
                                            </td>
                                        }
                                        else
                                        {
                                            <td></td>
                                        }
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>
        <!-- Right: Called number and 1-90 grid -->
        <div class="right-area">
            <div>
                <h4>Last Called Number</h4>
                <div class="called-number">
                    @(calledNumbers.Count > 0 ? calledNumbers[calledNumbers.Count - 1].ToString() : "-")
                </div>
            </div>
            <div>
                <!-- <h4>Numbers 1-90</h4> -->
                <table class="numbers-grid">
                    <tbody>
                        @for (int row = 0; row < 9; row++)
                        {
                            <tr>
                                @for (int col = 1; col <= 10; col++)
                                {
                                    int num = row * 10 + col;
                                    if (num > 90) break;
                                    bool isCalled = calledNumbers.Contains(num);
                                    <td class="@(isCalled ? "called" : null)">@num</td>
                                }
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}
else
{
    if(string.IsNullOrWhiteSpace(playerName))
    {
        <div class="alert alert-danger">
            You need to assign a name to play Bingo.<br />
            You will be redirected to Home page in 5 seconds...
        </div>
    }
    else
    {
        <p>Welcome @playerName. There is no ticket assigned to you yet.</p>
    }
}

@if (!string.IsNullOrEmpty(winMessage))
{
    <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Congratulations!</h5>
                </div>
                <div class="modal-body">
                    <div class="alert alert-success">@winMessage</div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" @onclick="() => winMessage = string.Empty">OK</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private HubConnection? hubConnection;
    private BingoTicket? ticket;
    private string playerName = string.Empty;
    private List<int> calledNumbers = new();
    private bool[,] marked = new bool[15, 9];
    private bool[] lineWinNotified = new bool[15];
    private bool hasShownLineWinPopup = false;
    private bool[] fullHouseNotified = new bool[5];
    private bool hasShownBingoWinPopup = false;
    private string winMessage = string.Empty;
    private bool namePrompted = false;

    protected override async Task OnInitializedAsync()
    {
        playerName = await jsRuntime.InvokeAsync<string>("bingoNameSession.getName") ?? string.Empty;
        if (string.IsNullOrWhiteSpace(playerName) && !namePrompted)
        {
            namePrompted = true;
            playerName = await jsRuntime.InvokeAsync<string>("prompt", "Enter your name for Bingo:") ?? string.Empty;
            if (!string.IsNullOrWhiteSpace(playerName))
            {
                await jsRuntime.InvokeVoidAsync("bingoNameSession.setName", playerName);
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("bingoNameSession.clearName");
                await InvokeAsync(StateHasChanged);
                // Defer navigation to after render to avoid rendering issues
                await Task.Delay(3000);
                await InvokeAsync(() => NavigationManager.NavigateTo("/", forceLoad: true));
                return;
            }
        }
        // Connect to SignalR via service
        await BingoHub.ConnectAsync(playerName);
        // Clear previous event handlers to avoid duplicates
        BingoHub.ClearEventHandlers();
        BingoHub.OnTicketReceived += (t) =>
        {
            bool isNewTicket = ticket == null || !JsonSerializer.Serialize(ticket).Equals(JsonSerializer.Serialize(t));
            ticket = t;
            if (ticket?.Numbers != null)
            {
                for (int i = 0; i < ticket.Numbers.Length; i++)
                {
                    if (ticket.Numbers[i] == null)
                        ticket.Numbers[i] = new int?[9];
                }
            }
            if (isNewTicket)
            {
                marked = new bool[15, 9];
                lineWinNotified = new bool[15];
                hasShownLineWinPopup = false;
            }
            // Save ticket to session storage
            var ticketJson = JsonSerializer.Serialize(ticket);
            jsRuntime.InvokeVoidAsync("bingoNameSession.setTicket", ticketJson);
            StateHasChanged();
        };
        BingoHub.OnNewGame += async () =>
        {
            ticket = null;
            calledNumbers.Clear();
            marked = new bool[15, 9];
            winMessage = string.Empty;
            hasShownLineWinPopup = false;
            await jsRuntime.InvokeVoidAsync("bingoNameSession.clearTicket");
            StateHasChanged();
        };
        // Subscribe to CalledNumbersSync event from server
        if (BingoHub.HubConnection != null)
        {
            BingoHub.HubConnection.On<int[]>("CalledNumbersSync", (numbers) =>
            {
                calledNumbers = numbers.ToList();
                StateHasChanged();
            });
            BingoHub.HubConnection.On<int, int, string>("LineWinAnnounced", (grid, rowInGrid, winnerName) =>
            {
                if (winnerName == playerName && !hasShownLineWinPopup)
                {
                    // Only show if not already shown locally
                    winMessage = "You won a line!";
                    hasShownLineWinPopup = true;
                }
            });
            BingoHub.HubConnection.On<string>("BingoWinAnnounced", (winnerName) =>
            {
                if (winnerName == playerName && !hasShownBingoWinPopup)
                {
                    // Only show if not already shown locally
                    winMessage = "You have won BINGO!";
                    hasShownBingoWinPopup = true;
                }
            });
        }
        BingoHub.OnNumberCalled += (number) =>
        {
            if (!calledNumbers.Contains(number))
                calledNumbers.Add(number);
            StateHasChanged();
        };
        // Try to load ticket from session storage if not set
        if (ticket == null)
        {
            var ticketJson = await jsRuntime.InvokeAsync<string>("bingoNameSession.getTicket");
            if (!string.IsNullOrWhiteSpace(ticketJson))
            {
                try
                {
                    ticket = JsonSerializer.Deserialize<BingoTicket>(ticketJson);
                    if (ticket?.Numbers != null)
                    {
                        for (int i = 0; i < ticket.Numbers.Length; i++)
                        {
                            if (ticket.Numbers[i] == null)
                                ticket.Numbers[i] = new int?[9];
                        }
                    }
                }
                catch { /* ignore deserialization errors */ }
            }
        }
    }

    private async void MarkCell(int row, int col)
    {
        //Console.WriteLine($"MarkCell called: row={row}, col={col}");
        if (ticket == null || ticket.Numbers == null || marked == null)
            return;
        if (row < 0 || row >= ticket.Numbers.Length || col < 0 || col >= 9)
            return;
        if (ticket.Numbers[row] == null || ticket.Numbers[row].Length <= col)
            return;
        if (ticket.Numbers[row][col] is not int value)
            return;
        // Toggle the mark (allow unchecking)
        marked[row, col] = !marked[row, col];
        await CheckForWin(row);
        StateHasChanged();
    }

    private async Task CheckForWin(int row)
    {
        int grid = row / 3;
        int rowInGrid = row % 3;
        // Check for line win
        bool lineWin = true;
        for (int j = 0; j < 9; j++)
        {
            var val = ticket?.Numbers[row][j];
            if (val.HasValue && !marked[row, j])
            {
                lineWin = false;
                break;
            }
        }
        // Only notify the server for the first time this line is completed
        if (lineWin && !lineWinNotified[row] && BingoHub.HubConnection != null)
        {
            lineWinNotified[row] = true;
            var isFirst = await BingoHub.HubConnection.InvokeAsync<bool>("LineWin", grid, rowInGrid, playerName);
            if (isFirst && !hasShownLineWinPopup)
            {
                winMessage = "You won a line!";
                hasShownLineWinPopup = true;
            }
        }
        // Check for full house
        bool fullHouse = true;
        for (int r = grid * 3; r < grid * 3 + 3; r++)
        {
            for (int j = 0; j < 9; j++)
            {
                var val = ticket?.Numbers[r][j];
                if (val.HasValue && !marked[r, j])
                {
                    fullHouse = false;
                    break;
                }
            }
            if (!fullHouse) break;
        }
        if (fullHouse && !fullHouseNotified[grid] && BingoHub.HubConnection != null)
        {
            fullHouseNotified[grid] = true;
            await BingoHub.HubConnection.InvokeAsync("FullHouseWin", grid, playerName);
        }
            // Check for BINGO (all numbers in a single grid are checked)
            if (ticket?.Numbers != null)
            {
                for (int bingoGrid = 0; bingoGrid < 5; bingoGrid++)
                {
                    bool bingo = true;
                    for (int r = bingoGrid * 3; r < bingoGrid * 3 + 3; r++)
                    {
                        for (int j = 0; j < 9; j++)
                        {
                            var val = ticket.Numbers[r][j];
                            if (val.HasValue && !marked[r, j])
                            {
                                bingo = false;
                                break;
                            }
                        }
                        if (!bingo) break;
                    }
                    if (bingo && BingoHub.HubConnection != null && !hasShownBingoWinPopup)
                    {
                        var isFirstBingo = await BingoHub.HubConnection.InvokeAsync<bool>("BingoWin", bingoGrid, playerName);
                        if (isFirstBingo)
                        {
                            winMessage = "You have won BINGO!";
                            hasShownBingoWinPopup = true;
                        }
                        break;
                    }
                }
            }
    }

    public void SetHubConnection(HubConnection? connection)
    {
        hubConnection = connection;
    }
}
